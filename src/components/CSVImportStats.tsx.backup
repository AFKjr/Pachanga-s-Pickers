import React, { useState } from 'react';
import { supabase } from '../lib/supabase';

interface TeamStatsRow {
  team: string;
  offensiveYards: number;
  defensiveYards: number;
  pointsPerGame: number;
  pointsAllowed: number;
  turnoverDiff: number;
  thirdDownPct: number;
  redZonePct: number;
}

interface SportsRefStats {
  team: string;
  games: number;
  points: number;
  totalYards: number;
  turnovers: number;
}

const CSVImportStats: React.FC = () => {
  const [offensiveFile, setOffensiveFile] = useState<File | null>(null);
  const [defensiveFile, setDefensiveFile] = useState<File | null>(null);
  const [parsing, setParsing] = useState(false);
  const [importing, setImporting] = useState(false);
  const [parsedData, setParsedData] = useState<TeamStatsRow[]>([]);
  const [errors, setErrors] = useState<string[]>([]);
  const [success, setSuccess] = useState('');

  const handleOffensiveFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile) {
      // Check file extension instead of MIME type (more reliable)
      const isCSV = selectedFile.name.toLowerCase().endsWith('.csv');
      if (isCSV) {
        setOffensiveFile(selectedFile);
        setErrors([]);
        setSuccess('');
        setParsedData([]);
      } else {
        setErrors(['Please select a valid CSV file (must end in .csv)']);
      }
    }
  };

  const handleDefensiveFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile) {
      // Check file extension instead of MIME type (more reliable)
      const isCSV = selectedFile.name.toLowerCase().endsWith('.csv');
      if (isCSV) {
        setDefensiveFile(selectedFile);
        setErrors([]);
        setSuccess('');
        setParsedData([]);
      } else {
        setErrors(['Please select a valid CSV file (must end in .csv)']);
      }
    }
  };

  const parseSportsReferenceCSV = async (file: File): Promise<Map<string, SportsRefStats>> => {
    const text = await file.text();
    const lines = text.split('\n').filter((line: string) => line.trim());
    
    // Find header line
    let headerLineIndex = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].toLowerCase();
      if (line.includes('rk,tm') || (line.includes('rk') && line.includes('tm') && (line.includes('pf') || line.includes('pa')))) {
        headerLineIndex = i;
        break;
      }
    }

    const headerLine = lines[headerLineIndex];
    const header = headerLine.split(',').map((h: string) => h.replace(/"/g, '').trim().toLowerCase());
    
    const indices = {
      team: header.indexOf('tm'),
      games: header.indexOf('g'),
      points: header.includes('pf') ? header.indexOf('pf') : header.indexOf('pa'),
      totalYards: header.indexOf('yds'),
      turnovers: header.indexOf('to')
    };

    const statsMap = new Map<string, SportsRefStats>();

    for (let i = headerLineIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line || line.startsWith('"---') || line.toLowerCase().includes('avg team') || line.toLowerCase().includes('league total')) {
        continue;
      }

      const values = line.split(',').map((v: string) => v.replace(/"/g, '').trim());
      const teamName = values[indices.team];
      
      if (!teamName || teamName === '' || /^\d+$/.test(teamName)) {
        continue;
      }

      statsMap.set(teamName, {
        team: teamName,
        games: parseFloat(values[indices.games]) || 1,
        points: parseFloat(values[indices.points]) || 0,
        totalYards: parseFloat(values[indices.totalYards]) || 0,
        turnovers: parseFloat(values[indices.turnovers]) || 0
      });
    }

    return statsMap;
  };

  const mergeStats = () => {
    if (!offensiveFile && !defensiveFile) {
      setErrors(['Please upload at least one CSV file']);
      return;
    }

    setParsing(true);
    setErrors([]);
    setParsedData([]);

    Promise.all([
      offensiveFile ? parseSportsReferenceCSV(offensiveFile) : Promise.resolve(new Map<string, SportsRefStats>()),
      defensiveFile ? parseSportsReferenceCSV(defensiveFile) : Promise.resolve(new Map<string, SportsRefStats>())
    ])
      .then(([offensiveStats, defensiveStats]) => {
        const merged: TeamStatsRow[] = [];
        const allTeams = new Set([...offensiveStats.keys(), ...defensiveStats.keys()]);

        // League averages for missing data
        const leagueAvgYards = 328.3;
        const leagueAvgPoints = 23.4;

        allTeams.forEach(team => {
          const offense = offensiveStats.get(team);
          const defense = defensiveStats.get(team);

          if (!offense && !defense) return;

          const offYardsPerGame = offense ? offense.totalYards / offense.games : leagueAvgYards;
          const defYardsPerGame = defense ? defense.totalYards / defense.games : leagueAvgYards;
          const offPointsPerGame = offense ? offense.points / offense.games : leagueAvgPoints;
          const defPointsPerGame = defense ? defense.points / defense.games : leagueAvgPoints;

          // Calculate turnover differential (Turnovers Gained - Turnovers Lost)
          const turnoversGained = defense ? defense.turnovers : 0;
          const turnoversLost = offense ? offense.turnovers : 0;
          const turnoverDiff = turnoversGained - turnoversLost;

          merged.push({
            team,
            offensiveYards: offYardsPerGame,
            defensiveYards: defYardsPerGame,
            pointsPerGame: offPointsPerGame,
            pointsAllowed: defPointsPerGame,
            turnoverDiff,
            thirdDownPct: 40.0, // Placeholder
            redZonePct: 55.0    // Placeholder
          });
        });

        setParsedData(merged);
        setParsing(false);

        if (merged.length === 0) {
          setErrors(['No valid team data found in CSV files']);
        }
      })
      .catch(err => {
        setErrors([err instanceof Error ? err.message : 'Failed to parse CSV files']);
        setParsing(false);
      });
  };

  const importToDatabase = async () => {
    if (parsedData.length === 0) {
      setErrors(['No data to import. Please parse CSV files first.']);
      return;
    }

    setImporting(true);
    setErrors([]);

    try {
      let imported = 0;
      let failed = 0;
      const importErrors: string[] = [];

      for (const row of parsedData) {
        try {
          const { error } = await supabase
            .from('team_stats_cache')
            .upsert({
              team_name: row.team,
              offensive_yards_per_game: row.offensiveYards,
              defensive_yards_allowed: row.defensiveYards,
              points_per_game: row.pointsPerGame,
              points_allowed_per_game: row.pointsAllowed,
              turnover_differential: row.turnoverDiff,
              third_down_conversion_rate: row.thirdDownPct,
              red_zone_efficiency: row.redZonePct,
              source: 'csv',
              last_updated: new Date().toISOString()
            });

          if (error) {
            throw error;
          }
          imported++;
        } catch (err) {
          failed++;
          importErrors.push(`${row.team}: ${err instanceof Error ? err.message : 'Unknown error'}`);
        }
      }

      if (imported > 0) {
        setSuccess(`Successfully imported ${imported} teams to database!`);
        setParsedData([]);
        setOffensiveFile(null);
        setDefensiveFile(null);
      }

      if (importErrors.length > 0) {
        setErrors(importErrors);
      }
    } catch (err) {
      setErrors([err instanceof Error ? err.message : 'Failed to import data']);
    } finally {
      setImporting(false);
    }
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6">
      <div className="mb-6">
        <h3 className="text-xl font-bold text-white mb-2">Import Team Stats from CSV</h3>
        <p className="text-gray-400 text-sm">
          Upload Sports Reference offensive and defensive CSV files to get complete team statistics
        </p>
      </div>

      {/* CSV Format Guide */}
      <div className="bg-blue-900 border border-blue-700 text-blue-200 px-4 py-3 rounded mb-4">
        <h4 className="font-semibold mb-2">üìã How to Use Sports Reference Data:</h4>
        
        <div className="text-sm space-y-2">
          <div>
            <p className="font-semibold mb-1">Step 1: Upload Offensive Stats CSV</p>
            <p className="text-xs">Contains: Rk,Tm,G,<strong>PF</strong>,Yds,Ply,Y/P,TO... (Points For, Offensive Yards)</p>
          </div>

          <div>
            <p className="font-semibold mb-1">Step 2: Upload Defensive Stats CSV</p>
            <p className="text-xs">Contains: Rk,Tm,G,<strong>PA</strong>,Yds,Ply,Y/P,TO... (Points Against, Yards Allowed)</p>
          </div>

          <div>
            <p className="font-semibold mb-1">Step 3: Click "Parse & Merge Stats"</p>
            <p className="text-xs">Combines both files to calculate complete statistics</p>
          </div>

          <div className="mt-2 p-2 bg-blue-950 rounded text-xs">
            <strong>‚úÖ What gets calculated:</strong>
            <ul className="list-disc list-inside mt-1">
              <li>OffensiveYards = Total Yds / Games (from offensive CSV)</li>
              <li>DefensiveYards = Total Yds / Games (from defensive CSV)</li>
              <li>PointsPerGame = PF / Games</li>
              <li>PointsAllowed = PA / Games</li>
              <li>TurnoverDiff = TO from defense - TO from offense</li>
            </ul>
          </div>

          <div className="text-yellow-200 text-xs">
            ‚ö†Ô∏è <strong>Note:</strong> ThirdDownPct and RedZonePct will use default values (40% and 55%) since they're not in basic stats CSV. Upload both offensive AND defensive CSVs for accurate data!
          </div>
        </div>
      </div>

      {/* File Uploads */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        {/* Offensive File */}
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Offensive Stats CSV (PF)
          </label>
          <input
            type="file"
            accept=".csv"
            onChange={handleOffensiveFileChange}
            className="block w-full text-sm text-gray-400
              file:mr-4 file:py-2 file:px-4
              file:rounded file:border-0
              file:text-sm file:font-semibold
              file:bg-blue-600 file:text-white
              hover:file:bg-blue-700
              cursor-pointer"
          />
          {offensiveFile && (
            <p className="text-xs text-green-400 mt-1">
              ‚úì {offensiveFile.name} ({(offensiveFile.size / 1024).toFixed(2)} KB)
            </p>
          )}
        </div>

        {/* Defensive File */}
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Defensive Stats CSV (PA)
          </label>
          <input
            type="file"
            accept=".csv"
            onChange={handleDefensiveFileChange}
            className="block w-full text-sm text-gray-400
              file:mr-4 file:py-2 file:px-4
              file:rounded file:border-0
              file:text-sm file:font-semibold
              file:bg-blue-600 file:text-white
              hover:file:bg-blue-700
              cursor-pointer"
          />
          {defensiveFile && (
            <p className="text-xs text-green-400 mt-1">
              ‚úì {defensiveFile.name} ({(defensiveFile.size / 1024).toFixed(2)} KB)
            </p>
          )}
        </div>
      </div>

      {/* Parse Button */}
      <div className="mb-4">
        <button
          onClick={mergeStats}
          disabled={parsing || (!offensiveFile && !defensiveFile)}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed"
        >
          {parsing ? 'Parsing...' : 'Parse & Merge Stats'}
        </button>
      </div>

      {/* Errors */}
      {errors.length > 0 && (
        <div className="bg-red-900 border border-red-700 text-red-200 px-4 py-3 rounded mb-4">
          <h4 className="font-semibold mb-2">Errors:</h4>
          <ul className="list-disc list-inside text-sm">
            {errors.map((error, idx) => (
              <li key={idx}>{error}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Success */}
      {success && (
        <div className="bg-green-900 border border-green-700 text-green-200 px-4 py-3 rounded mb-4">
          {success}
        </div>
      )}

      {/* Preview Table */}
      {parsedData.length > 0 && (
        <div className="mb-4">
          <div className="flex justify-between items-center mb-2">
            <h4 className="text-lg font-semibold text-white">
              Preview: {parsedData.length} teams ready to import
            </h4>
            <button
              onClick={importToDatabase}
              disabled={importing}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed"
            >
              {importing ? 'Importing...' : 'Import to Database'}
            </button>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead className="bg-gray-700 text-gray-300">
                <tr>
                  <th className="px-3 py-2 text-left">Team</th>
                  <th className="px-3 py-2 text-right">Off Yds</th>
                  <th className="px-3 py-2 text-right">Def Yds</th>
                  <th className="px-3 py-2 text-right">PPG</th>
                  <th className="px-3 py-2 text-right">PA/G</th>
                  <th className="px-3 py-2 text-right">TO Diff</th>
                  <th className="px-3 py-2 text-right">3rd %</th>
                  <th className="px-3 py-2 text-right">RZ %</th>
                </tr>
              </thead>
              <tbody className="bg-gray-900 text-gray-300">
                {parsedData.map((row, idx) => (
                  <tr key={idx} className="border-t border-gray-700">
                    <td className="px-3 py-2">{row.team}</td>
                    <td className="px-3 py-2 text-right">{row.offensiveYards.toFixed(1)}</td>
                    <td className="px-3 py-2 text-right">{row.defensiveYards.toFixed(1)}</td>
                    <td className="px-3 py-2 text-right">{row.pointsPerGame.toFixed(1)}</td>
                    <td className="px-3 py-2 text-right">{row.pointsAllowed.toFixed(1)}</td>
                    <td className="px-3 py-2 text-right">{row.turnoverDiff.toFixed(0)}</td>
                    <td className="px-3 py-2 text-right">{row.thirdDownPct.toFixed(1)}</td>
                    <td className="px-3 py-2 text-right">{row.redZonePct.toFixed(1)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
};

export default CSVImportStats;
